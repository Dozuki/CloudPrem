AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: Regional CodePipeline resources required for Cloudprem pipelines

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required Configuration
      Parameters:
      - OwnerName

Parameters:

  SourceActionVersion:
    Type: String
    Description: Version of the custom source action for CodePipeline. Update the version if required
    Default: '1'

  SourceActionProvider:
    Type: String
    Description: Provider name of the custom source action for CodePipeline
    Default: Git

  OwnerName:
    Type: String
    Description: An arbitrary tag name for the owner of the environment pipeline

  CodeCommit:
    Type: String
    AllowedValues: [true, false]
    Default: False
    Description: Create a local code commit repository for regional configuration, we will seed the repository's `master` branch with the default config.

  CodeCommitBucket:
    Type: String
    Default: dozuki-cloudprem-assets
    Description: If creating CodeCommit repository, what S3 bucket has the seed zip file.

  CodeCommitObject:
    Type: String
    Default: cloudprem-config.zip
    Description: The object in the bucket listed above to seed the repository with.

  CodeCommitVersion:
    Type: String
    Default: latest
    Description: Which version of the seed zip should we use.

Conditions:

    CreateCodeCommit: !Equals [ !Ref CodeCommit, 'true' ]
    UseLatestSeed: !Equals [ !Ref CodeCommitVersion, latest ]

Mappings:

  PartitionMap: 
    aws:
      ServerlessRepoArn: arn:aws:serverlessrepo:us-east-1:010601635461:applications/dozuki-codepipeline
    aws-us-gov:
      ServerlessRepoArn: arn:aws-us-gov:serverlessrepo:us-gov-west-1:446787640263:applications/dozuki-codepipeline

Resources:

  DozukiCodepipeline:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: !FindInMap [ PartitionMap, !Ref "AWS::Partition", ServerlessRepoArn]
        SemanticVersion: 1.2.8
      Parameters:
        SourceActionVersion: !Ref SourceActionVersion
        SourceActionProvider: !Ref SourceActionProvider
        OwnerName: !Ref OwnerName

  LocalConfig:
    Type: AWS::CodeCommit::Repository
    Condition: CreateCodeCommit
    Properties:
      RepositoryName: !Sub dozuki-config-${AWS::Region}
      RepositoryDescription: Infrastructure configuration for stacks in this region.
      Code:
        BranchName: master
        S3:
          Bucket: !Ref CodeCommitBucket
          Key: !Ref CodeCommitObject
          ObjectVersion: !If [ UseLatestSeed , !Ref AWS::NoValue, !Ref CodeCommitVersion ]

  BastionMySQLSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: BastionMySQLConfig
      UpdateMethod: NewVersion
      DocumentFormat: YAML
      DocumentType: Command
      Content: !Sub |
        description: |
          Configures the bastion to connect to the primary RDS instance without a password
        schemaVersion: '2.2'
        parameters:
          RDSEndpoint:
            type: "String"
            description: "Database Hostname"
          RDSCredentialSecret:
            type: "String"
            description: "Secret ID to Primary RDS credentials"
          Region:
            type: "String"
            description: "AWS Region"
            default: "${AWS::Region}"
        mainSteps:
          - action: aws:runShellScript
            name: installDeps
            inputs:
              runCommand:
                - sudo yum install -y jq mariadb
          - action: aws:runShellScript
            name: configMySQL
            inputs:
              runCommand:
                - |
                  CREDENTIALS=$(aws secretsmanager get-secret-value --region "{{ Region }}" \
                  --secret-id "{{ RDSCredentialSecret }}" | \
                  jq -r .SecretString | \
                  jq --raw-output '"user=\(.username)\npassword=\(.password)"')

                  mkdir -p /home/ssm-user

                  cat << EOF > /home/ssm-user/.my.cnf
                  [client]
                  host={{ RDSEndpoint }}
                  $CREDENTIALS
                  EOF

  BastionKubernetesSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: BastionKubernetesConfig
      UpdateMethod: NewVersion
      DocumentFormat: YAML
      DocumentType: Command
      Content: !Sub |
        description: Downloads and configures correct versions of kubectl and helm as well as bootstrapping the ssm-user account.
        schemaVersion: '2.2'
        parameters:
          EKSClusterName:
            type: "String"
            description: "EKS Cluster Name"
          EKSClusterRole:
            type: "String"
            description: "EKS Cluster Access Role ARN"
          Region:
            type: "String"
            description: "AWS Region"
            default: "${AWS::Region}"
        mainSteps:
          - action: aws:downloadContent
            name: downloadKubectl
            inputs:
              sourceType: "HTTP"
              sourceInfo:
                url: "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl"
              destinationPath: "/usr/bin/kubectl"
          - action: aws:downloadContent
            name: downloadHelm
            inputs:
              sourceType: "HTTP"
              sourceInfo:
                url: "https://get.helm.sh/helm-v3.8.1-linux-amd64.tar.gz"
              destinationPath: "/tmp/helm.tar.gz"
          - action: aws:runShellScript
            name: installHelm
            inputs:
              runCommand:
                - tar -xzf /tmp/helm.tar.gz
                - cp linux-amd64/helm /usr/bin/helm
          - action: aws:runShellScript
            name: addSSMUser
            inputs:
              runCommand:
                - |
                  useradd ssm-user
                  cat << EOF > /etc/sudoers.d/ssm-agent-users
                  # User rules for ssm-user
                  ssm-user ALL=(ALL) NOPASSWD:ALL
                  EOF
          - action: aws:runShellScript
            name: configureEKS
            inputs:
              runCommand:
                - mkdir -p /home/ssm-user/.kube
                - aws eks update-kubeconfig --name "{{ EKSClusterName }}" --role-arn "{{ EKSClusterRole }}" --kubeconfig /home/ssm-user/.kube/config --region {{ Region }}
          - action: aws:runShellScript
            name: updatePermissions
            inputs:
              runCommand:
                - chmod 755 /usr/bin/kubectl
                - chmod 755 /usr/bin/helm
                - chown -R ssm-user:ssm-user /home/ssm-user/.kube
                - chmod -R 700 /home/ssm-user/.kube
Outputs:

  PublicSSHKey:
    Description: Public SSH key for the Git CodePipeline source stage. Add the SSH key to your git repository
    Value: !GetAtt DozukiCodepipeline.Outputs.PublicSSHKey

  BucketName:
    Description: Codepipeline artifcats S3 bucket name
    Value: !GetAtt DozukiCodepipeline.Outputs.BucketName

  BucketArn:
    Description: Codepipeline artifcats S3 bucket ARN
    Value: !GetAtt DozukiCodepipeline.Outputs.BucketArn

  CodeCommitRepoName:
    Condition: CreateCodeCommit
    Description: CodeCommit repository name for regional infra configuration.
    Export:
        Name: code-commit-repo-name
    Value: !GetAtt LocalConfig.Name